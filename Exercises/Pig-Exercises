-- Find Old 5-star movies using Pig

-- Load data - mapper operation
ratings = LOAD '/user/maria_dev/ml-100k/u.data' AS (userID:int, movieID:int, rating:int, ratingTime:int);

-- Load metadata for displaying movie title in the results
metadata = LOAD '/user/maria_dev/ml-100k/u.item' USING PigStorage('|')
	AS (movieID:int, movieTitle:chararray, releaseDate:chararray, videoRealese:chararray, imdblink:chararray);

-- Create a look up mapper for Movie ID to Movie title
nameLookup = FOREACH metadata GENERATE movieID, movieTitle,
	ToUnixTime(ToDate(releaseDate, 'dd-MMM-yyyy')) AS releaseTime;
   
-- Group ratings by movie - reducer operation   
ratingsByMovie = GROUP ratings BY movieID;

-- Find average rating by movie
avgRatings = FOREACH ratingsByMovie GENERATE group as movieID, AVG(ratings.rating) as avgRating;

-- Filter out only top rated movies
fiveStarMovies = FILTER avgRatings BY avgRating > 4.0;

-- Join data and metadata information
fiveStarsWithData = JOIN fiveStarMovies BY movieID, nameLookup BY movieID;

-- Display the old movies first by ordering the results by release time
oldestFiveStarMovies = ORDER fiveStarsWithData BY nameLookup::releaseTime;
DUMP oldestFiveStarMovies;


-- Find most rated one star movies

-- Load data - mapper operation
ratings = LOAD '/user/maria_dev/ml-100k/u.data' AS (userID:int, movieID:int, rating:int, ratingTime:int);

-- Load metadata for displaying movie title in the results
metadata = LOAD '/user/maria_dev/ml-100k/u.item' USING PigStorage('|')
	AS (movieID:int, movieTitle:chararray, releaseDate:chararray, videoRealese:chararray, imdblink:chararray);

-- Create a look up mapper for Movie ID to Movie title
nameLookup = FOREACH metadata GENERATE movieID, movieTitle;
   
-- Group ratings by movie - reducer operation   
groupedRatings = GROUP ratings BY movieID;

-- Find average rating by movie
averageRatings = FOREACH groupedRatings GENERATE group AS movieID, 
                 AVG(ratings.rating) as avgRating, COUNT(ratings.rating) AS numRatings;

-- Filter out only bag movies by average rating
badMovies = FILTER averageRatings BY avgRating < 2.0;

-- Join data and metadata information
namedBadMovies = JOIN badMovies BY movieID, nameLookup BY movieID;

-- Display the results
finalResults = FOREACH namedBadMovies GENERATE nameLookup::movieTitle AS movieName,
		badMovies::avgRating AS avgRating, badMovies :: numRatings AS numRatings;

finalResultsSorted = ORDER finalResults BY numRatings DESC;

DUMP finalResultsSorted;

